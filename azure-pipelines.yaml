name: Azure Pipelines
variables:
  python.version: '3.7.6'
  System.Debug: true
stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '$(KNOWN_HOST_STRING)'
        sshPublicKey: '$(PUBLIC_KEY)'
        sshKeySecureFile: 'id_rsa'
    - task: TerraformInstaller@0
      inputs:
        terraformVersion: '0.13.2'
    - task: TerraformTaskV1@0
      displayName: Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'UdacityQARelease'
        backendAzureRmResourceGroupName: 'uda-vault-rg'
        backendAzureRmStorageAccountName: 'udaterrasa'
        backendAzureRmContainerName: 'terracontainer'
        backendAzureRmKey: 'uda.terraform.tfstate'
        workingDirectory: 'terraform'
    - task: TerraformTaskV1@0
      displayName: 'validate and apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        environmentServiceNameAzureRM: 'UdacityQARelease'
        workingDirectory: 'terraform'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'UdacityQARelease'
              appName: 'uda-fake-rest-api'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


