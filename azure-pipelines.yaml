name: Azure Pipelines
variables:
  python.version: '3.7.6'
  System.Debug: true
stages:
- stage: Build
  jobs:
  - job: Jmeter
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: JMeterInstaller@0
      displayName: 'Install JMeter 5.2.1'
      inputs:
        jmeterVersion: '5.2.1'
    - task: Bash@3
      displayName: 'Run Jmeter test'
      inputs:
        targetType: 'inline'
        script: |
          jmeter -n -t automatedtesting/jmeter/Starter.jmx -Jresdir=automatedtesting/jmeter/NumberOfUsers.csv
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: '$(KNOWN_HOST_STRING)'
        sshPublicKey: '$(PUBLIC_KEY)'
        sshKeySecureFile: 'id_rsa'
    - task: CmdLine@2
      displayName: Install newman package command
      inputs:
        script: 'sudo npm install -g newman'
        WorkingDirectory : $(System.DefaultWorkingDirectory)
    - task: CmdLine@2
      condition: succeededOrFailed()
      displayName: Run newman command
      inputs:
        script: 'newman run automatedtesting/postman/StarterAPIs.json automatedtesting/postman/dev.postman_environment.json --reporters cli,junit --reporter-junit-export Results\junitReport.xml'
        WorkingDirectory : $(System.DefaultWorkingDirectory)
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
          
        workingDirectory: '$(System.DefaultWorkingDirectory)'
        failOnStderr: false
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/Results/junitReport.xml'
        failTaskOnFailedTests: false
        testRunTitle: 'Integration Tests'
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '0.13.2'
    - task: DownloadSecureFile@1
      displayName: 'Download secure file $(terraform.tfvars)'
      inputs:
        secureFile: 'terraform.tfvars'
    - task: TerraformTaskV1@0
      displayName: Terraform Init
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'UdacityQARelease'
        backendAzureRmResourceGroupName: 'uda-vault-rg'
        backendAzureRmStorageAccountName: 'udaterrasa'
        backendAzureRmContainerName: 'terracontainer'
        backendAzureRmKey: 'uda.terraform.tfstate'
        workingDirectory: 'terraform'
    - task: TerraformTaskV1@0
      displayName: Terraform validate and apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        commandOptions: '-var-file="$(Agent.TempDirectory)/terraform.tfvars'
        environmentServiceNameAzureRM: 'UdacityQARelease'
        workingDirectory: 'terraform'
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      continueOnError: true
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi

- stage: Deploy
  jobs:
  - deployment: FakeRestAPI
    pool:
      vmImage: 'Ubuntu-16.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'UdacityQARelease'
              appName: 'udacity-capstone-AppService'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
          - task: Bash@3
  - deployment: VMDeploy
    displayName: Install packages for testing
    environment:
      name:  MyLinuxDev
      resourceType: VirtualMachine
      tags: web
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt-get upgrade -y
                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                pip3 install selenium
                export PATH=$PATH:/usr/bin/chromium-browser


